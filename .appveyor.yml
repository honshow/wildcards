version: 1.3.0.{build}

init:
  - git config --global core.autocrlf true

environment:
  matrix:
    - compiler: Visual Studio 14 2015
      GENERATOR: "Visual Studio 14 2015"
      APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2015

    - compiler: Visual Studio 15 2017
      GENERATOR: "Visual Studio 15 2017"
      APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017

    - compiler: MinGW 5
      GENERATOR: "MinGW Makefiles"
      MINGW_PATH: C:\mingw-w64\i686-5.3.0-posix-dwarf-rt_v4-rev0
      APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2015

    - compiler: MinGW 6
      GENERATOR: "MinGW Makefiles"
      MINGW_PATH: C:\mingw-w64\i686-6.3.0-posix-dwarf-rt_v5-rev1
      APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2015

    #- CXX_STANDARD: 11
    #- CXX_STANDARD: 14
    #- CXX_STANDARD: 17

platform:
  - x32
  - x64

configuration:
  - Debug
  - Release

install:
  - cmake --version
  - dir C:\mingw*
  - dir C:\mingw-w64

  #######################
  # CMake generator setup
  #######################

  - ps: |
      if ($env:GENERATOR -match "Visual Studio") {
        if ($env:PLATFORM -eq "x64") {
          $env:GENERATOR += " Win64"
        }
      } elseif ($env:GENERATOR -eq "MinGW Makefiles") {
        if ($env:PLATFORM -eq "x64") {
          $env:MINGW_PATH += "\mingw64\bin"
        } else {
          $env:MINGW_PATH += "\mingw32\bin"
        }
        # git bash conflicts with MinGW Makefiles
        $env:PATH = $env:PATH.replace("C:\Program Files\Git\usr\bin;", "")
        $env:PATH += ";$env:MINGW_PATH"
      }
  - echo %GENERATOR%

before_build:
  - ps: |
      cd $env:APPVEYOR_BUILD_FOLDER
      & cmake . -Bbuild -G "$env:GENERATOR" -DWILDCARDS_BUILD_EXAMPLES=ON #-DWILDCARDS_CXX_STANDARD=%CXX_STANDARD%
      if ($LastExitCode -ne 0) {
        throw "Exec: $ErrorMessage"
      }

build_script:
  - ps: |
      $cmake_parallel = if ($env:GENERATOR -eq "MinGW Makefiles") {"-j2"} else {"/m"}
      cmake --build build --config $env:CONFIGURATION -- $cmake_parallel
      if ($LastExitCode -ne 0) {
        throw "Exec: $ErrorMessage"
      }

test_script:
  - ps: |
      cd build
      & ctest --output-on-failure --build-config $env:CONFIGURATION
      if ($LastExitCode -ne 0) {
        throw "Exec: $ErrorMessage"
      }
